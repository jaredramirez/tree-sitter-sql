==================
Alter table and add column
==================

ALTER TABLE my_table
  ADD COLUMN val3 VARCHAR(100) NOT NULL;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (add_column (keyword_add) (keyword_column)
    (column_definition
     name: (identifier)
     (type (builtin size: (number)))
     (keyword_not)
     (keyword_null))
   ))))

==================
Alter table and alter column setting default
==================

ALTER TABLE my_table
  ALTER COLUMN val3 SET DEFAULT 'hi';

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (alter_column
    (keyword_alter)
    (keyword_column)
    name: (identifier)
    (keyword_set)
    (keyword_default)
    (string (string_fragment))
  ))))

==================
Alter table and alter column dropping default
==================

ALTER TABLE my_table
  ALTER COLUMN val3 DROP DEFAULT;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (alter_column
    (keyword_alter)
    (keyword_column)
    name: (identifier)
    (keyword_drop)
    (keyword_default)
  ))))

==================
Alter table and alter column changing type
==================

ALTER TABLE my_table
  ALTER COLUMN val3 TYPE VARCHAR(255);

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (alter_column
    (keyword_alter)
    (keyword_column)
    name: (identifier)
    (keyword_type)
    (type (builtin size: (number))))
  )))

==================
Alter table and alter column dropping not-null constraint
==================

ALTER TABLE my_table
  ALTER COLUMN val3 DROP NOT NULL;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (alter_column
    (keyword_alter)
    (keyword_column)
    name: (identifier)
    (keyword_drop)
    (keyword_not)
    (keyword_null)))))

==================
Alter table and drop column
==================

ALTER TABLE my_table
  DROP COLUMN val3;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (drop_column
    (keyword_drop)
    (keyword_column)
    name: (identifier))
  )))


==================
Alter table and rename column
==================

ALTER TABLE my_table
  RENAME COLUMN val3 TO valthree;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (rename_column
    (keyword_rename)
    (keyword_column)
    old_name: (identifier)
    (keyword_to)
    new_name: (identifier)))))

==================
Alter and rename table
==================

ALTER TABLE my_table
  RENAME TO my_new_and_improved_table;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (rename_object
    (keyword_rename)
    (keyword_to)
    (table_reference name: (identifier))
   ))))

==================
Alter table and set schema
==================

ALTER TABLE my_table
  SET SCHEMA new_schema;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (set_schema
    (keyword_set)
    (keyword_schema)
    schema: (identifier)
   ))))

==================
Alter table and change owner
==================

ALTER TABLE my_table
  OWNER TO someone_else;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (table_reference name: (identifier))
   (change_ownership
    (keyword_owner)
    (keyword_to)
    (identifier)
   ))))

==================
Alter table and multiple
==================

ALTER TABLE IF EXISTS my_table
  ADD COLUMN IF NOT EXISTS val4 DATE,
  ALTER COLUMN val5 DROP NOT NULL, -- comment, ignore me!
  DROP COLUMN IF EXISTS val6;

---

(program
 (statement
  (alter_table
   (keyword_alter)
   (keyword_table)
   (keyword_if)
   (keyword_exists)
   (table_reference name: (identifier))
   (add_column
    (keyword_add)
    (keyword_column)
    (keyword_if)
    (keyword_not)
    (keyword_exists)
    (column_definition name: (identifier) (type (builtin))))
   (alter_column
    (keyword_alter)
    (keyword_column)
    name: (identifier)
    (keyword_drop)
    (keyword_not)
    (keyword_null))
   (comment)
   (drop_column
    (keyword_drop)
    (keyword_column)
    (keyword_if)
    (keyword_exists)
    name: (identifier))
  )))

==================
Alter view and change owner
==================

ALTER VIEW my_view
  OWNER TO someone_else;

---

(program
 (statement
  (alter_view
   (keyword_alter)
   (keyword_view)
   (table_reference name: (identifier))
   (change_ownership
    (keyword_owner)
    (keyword_to)
    (identifier)
   ))))

==================
Alter view and rename
==================

ALTER VIEW IF EXISTS my_view
  RENAME TO my_other_view;

---

(program
 (statement
  (alter_view
   (keyword_alter)
   (keyword_view)
   (keyword_if)
   (keyword_exists)
   (table_reference name: (identifier))
   (rename_object
    (keyword_rename)
    (keyword_to)
    (table_reference name: (identifier))
   ))))

==================
Alter type lots o forms (postgresql)
==================

alter type test
    add attribute a boolean restrict,
    drop attribute if exists b cascade,
    alter attribute c set data type int collate true;

---

(program
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (alter_type_action
        (keyword_add)
        (keyword_attribute)
        (identifier)
        (type
          (builtin))
        (keyword_restrict))
      (alter_type_action
        (keyword_drop)
        (keyword_attribute)
        (keyword_if)
        (keyword_exists)
        (identifier)
        (keyword_cascade))
      (alter_type_action
        (keyword_alter)
        (keyword_attribute)
        (ERROR)
        (keyword_set)
        (keyword_data)
        (keyword_type)
        (identifier)
        (keyword_collate)
        (boolean)))))

==================
Alter type lots o forms (postgresql)
==================

alter type custom1 owner to current_role;
alter type custom1 rename to custom2;
alter type custom2 set schema blah;
alter type custom2 rename attribute a to b;
alter type custom2 add value if not exists 'a';
alter type custom2 add value if not exists 'b' after 'a';
alter type custom2 rename value 'a' to 'z';
alter type custom2 set ( recieve = test, send = none, storage = extended );

---

(program
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_owner)
      (keyword_to)
      (keyword_current_role)))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_rename)
      (keyword_to)
      (type
        (custom))))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_set)
      (keyword_schema)
      (identifier)))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_rename)
      (keyword_attribute)
      (identifier)
      (keyword_to)
      (identifier)))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_add)
      (keyword_value)
      (keyword_if)
      (keyword_not)
      (keyword_exists)
      (string
        (string_fragment))))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_add)
      (keyword_value)
      (keyword_if)
      (keyword_not)
      (keyword_exists)
      (string
        (string_fragment))
      (keyword_after)
      (string
        (string_fragment))))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_rename)
      (keyword_value)
      (string
        (string_fragment))
      (keyword_to)
      (string
        (string_fragment))))
  (statement
    (alter_type
      (keyword_alter)
      (keyword_type)
      (type
        (custom))
      (keyword_set)
      (alter_type_property
        (keyword_recieve)
        (identifier))
      (alter_type_property
        (keyword_send)
        (keyword_none))
      (alter_type_property
        (keyword_storage)
        (keyword_extended)))))